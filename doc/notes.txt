GIT Training Session - 11/23/2015
---------------------------------
Class website:
http://chendaniely.github.io/2015-11-23-harvard/
http://software-carpentry.org/lessons.html

* useful notes for organizing projects:
http://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1000424

I. Basics of GIT
 - in directory you want to track:

  >git init
  initializes the directory as a git repository [NOTE: don't ever do another init!]

  >git status
  shows you what still needs to be tracked

Use "add" command to start tracking those files (adds to staging area)
  >git add <filename> or "*" or "."

Commit will then save that state of the file with a message
  >git commit -m "message about your commit"

 To see the commit history - try:
  >git log
   --> add "--oneline" to show commits as one per line formatted

 To see differences between your last commit and current state:
 > git diff
 If you're in a clean repository with no commits needed, you can see the diff
 from the last commit using:
 > git diff HEAD~1

"Checkout" an older version of a file
> git checkout HEAD~1 (goes back 1 commit) <filename.ext>
 - this could for example undelete a file that was deleted in a previous commit

> git reset --hard
 - it's a PANIC button if you did something bad, it'll undo everything you've done
 up to the last commit and reset the directory to the state of that commit

>git checkout by hash number:
~/code/2015-11-23-harvard-git (master)  $ git log --oneline
c4636a2 another note update
ce6dd1b update notes
acf3e22 update README
fa61f90 another update to notes
41687b6 update to notes
0740c7a initial commit for git training project
>git checkout c4636a2 <filename.ext> (see use of specific hash)

DETATCHED HEAD STATE!!
git checkout [hash from previous commit]
 - changes the directory to that commit so you can run an older version of code

git checkout master
 - this brings thing back to the latest state

 II. Collaborating with git

 FORK
  - copies an existing repository into your own GitHub account
  - you can then make any changes you want and stay with that
  - if you want to add your changes back into the source code base, you can do a
  pull request
  - if you need to incorporate more changes from the source later, you can call
  it "remote upstream (instead of origin)" and do a >git pull remote upstream
  to incorporate the latest changes into your code, then sync up with your own remote origin
  
